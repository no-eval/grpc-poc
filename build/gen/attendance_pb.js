/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.attendancePackage.AttendanceLogs', null, global);
goog.exportSymbol('proto.attendancePackage.Log', null, global);
goog.exportSymbol('proto.attendancePackage.LogsRequest', null, global);
goog.exportSymbol('proto.attendancePackage.Punch', null, global);
goog.exportSymbol('proto.attendancePackage.Punch.PunchType', null, global);
goog.exportSymbol('proto.attendancePackage.Punch.WorkFromType', null, global);
goog.exportSymbol('proto.attendancePackage.UpdateLog', null, global);
goog.exportSymbol('proto.attendancePackage.UpdateLogsRequest', null, global);
goog.exportSymbol('proto.attendancePackage.UpdateLogsStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.LogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.attendancePackage.LogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.LogsRequest.displayName = 'proto.attendancePackage.LogsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.LogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.LogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.LogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.LogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    employeeId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.LogsRequest}
 */
proto.attendancePackage.LogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.LogsRequest;
  return proto.attendancePackage.LogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.LogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.LogsRequest}
 */
proto.attendancePackage.LogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployeeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.LogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.LogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.LogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.LogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmployeeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 employee_id = 1;
 * @return {number}
 */
proto.attendancePackage.LogsRequest.prototype.getEmployeeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.attendancePackage.LogsRequest.prototype.setEmployeeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.AttendanceLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.attendancePackage.AttendanceLogs.repeatedFields_, null);
};
goog.inherits(proto.attendancePackage.AttendanceLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.AttendanceLogs.displayName = 'proto.attendancePackage.AttendanceLogs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.attendancePackage.AttendanceLogs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.AttendanceLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.AttendanceLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.AttendanceLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.AttendanceLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attendanceLogsList: jspb.Message.toObjectList(msg.getAttendanceLogsList(),
    proto.attendancePackage.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.AttendanceLogs}
 */
proto.attendancePackage.AttendanceLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.AttendanceLogs;
  return proto.attendancePackage.AttendanceLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.AttendanceLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.AttendanceLogs}
 */
proto.attendancePackage.AttendanceLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.attendancePackage.Log;
      reader.readMessage(value,proto.attendancePackage.Log.deserializeBinaryFromReader);
      msg.addAttendanceLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.AttendanceLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.AttendanceLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.AttendanceLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.AttendanceLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttendanceLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.attendancePackage.Log.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Log attendance_logs = 1;
 * @return {!Array<!proto.attendancePackage.Log>}
 */
proto.attendancePackage.AttendanceLogs.prototype.getAttendanceLogsList = function() {
  return /** @type{!Array<!proto.attendancePackage.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.attendancePackage.Log, 1));
};


/** @param {!Array<!proto.attendancePackage.Log>} value */
proto.attendancePackage.AttendanceLogs.prototype.setAttendanceLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.attendancePackage.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.attendancePackage.Log}
 */
proto.attendancePackage.AttendanceLogs.prototype.addAttendanceLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.attendancePackage.Log, opt_index);
};


proto.attendancePackage.AttendanceLogs.prototype.clearAttendanceLogsList = function() {
  this.setAttendanceLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.attendancePackage.Log.repeatedFields_, null);
};
goog.inherits(proto.attendancePackage.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.Log.displayName = 'proto.attendancePackage.Log';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.attendancePackage.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    shiftDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    punchList: jspb.Message.toObjectList(msg.getPunchList(),
    proto.attendancePackage.Punch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.Log}
 */
proto.attendancePackage.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.Log;
  return proto.attendancePackage.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.Log}
 */
proto.attendancePackage.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShiftDate(value);
      break;
    case 2:
      var value = new proto.attendancePackage.Punch;
      reader.readMessage(value,proto.attendancePackage.Punch.deserializeBinaryFromReader);
      msg.addPunch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShiftDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPunchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.attendancePackage.Punch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string shift_date = 1;
 * @return {string}
 */
proto.attendancePackage.Log.prototype.getShiftDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.attendancePackage.Log.prototype.setShiftDate = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Punch punch = 2;
 * @return {!Array<!proto.attendancePackage.Punch>}
 */
proto.attendancePackage.Log.prototype.getPunchList = function() {
  return /** @type{!Array<!proto.attendancePackage.Punch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.attendancePackage.Punch, 2));
};


/** @param {!Array<!proto.attendancePackage.Punch>} value */
proto.attendancePackage.Log.prototype.setPunchList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.attendancePackage.Punch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.attendancePackage.Punch}
 */
proto.attendancePackage.Log.prototype.addPunch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.attendancePackage.Punch, opt_index);
};


proto.attendancePackage.Log.prototype.clearPunchList = function() {
  this.setPunchList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.Punch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.attendancePackage.Punch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.Punch.displayName = 'proto.attendancePackage.Punch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.Punch.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.Punch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.Punch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.Punch.toObject = function(includeInstance, msg) {
  var f, obj = {
    punchTime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    punchType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    workFromType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.Punch}
 */
proto.attendancePackage.Punch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.Punch;
  return proto.attendancePackage.Punch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.Punch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.Punch}
 */
proto.attendancePackage.Punch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPunchTime(value);
      break;
    case 2:
      var value = /** @type {!proto.attendancePackage.Punch.PunchType} */ (reader.readEnum());
      msg.setPunchType(value);
      break;
    case 3:
      var value = /** @type {!proto.attendancePackage.Punch.WorkFromType} */ (reader.readEnum());
      msg.setWorkFromType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.Punch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.Punch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.Punch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.Punch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPunchTime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPunchType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWorkFromType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.attendancePackage.Punch.PunchType = {
  IN: 0,
  OUT: 1
};

/**
 * @enum {number}
 */
proto.attendancePackage.Punch.WorkFromType = {
  HOME: 0,
  OFFICE: 1,
  OUT_DUTY: 2
};

/**
 * optional string punch_time = 1;
 * @return {string}
 */
proto.attendancePackage.Punch.prototype.getPunchTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.attendancePackage.Punch.prototype.setPunchTime = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PunchType punch_type = 2;
 * @return {!proto.attendancePackage.Punch.PunchType}
 */
proto.attendancePackage.Punch.prototype.getPunchType = function() {
  return /** @type {!proto.attendancePackage.Punch.PunchType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.attendancePackage.Punch.PunchType} value */
proto.attendancePackage.Punch.prototype.setPunchType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional WorkFromType work_from_type = 3;
 * @return {!proto.attendancePackage.Punch.WorkFromType}
 */
proto.attendancePackage.Punch.prototype.getWorkFromType = function() {
  return /** @type {!proto.attendancePackage.Punch.WorkFromType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.attendancePackage.Punch.WorkFromType} value */
proto.attendancePackage.Punch.prototype.setWorkFromType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.UpdateLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.attendancePackage.UpdateLogsRequest.repeatedFields_, null);
};
goog.inherits(proto.attendancePackage.UpdateLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.UpdateLogsRequest.displayName = 'proto.attendancePackage.UpdateLogsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.attendancePackage.UpdateLogsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.UpdateLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.UpdateLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.UpdateLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    employeeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updateLogsList: jspb.Message.toObjectList(msg.getUpdateLogsList(),
    proto.attendancePackage.UpdateLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.UpdateLogsRequest}
 */
proto.attendancePackage.UpdateLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.UpdateLogsRequest;
  return proto.attendancePackage.UpdateLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.UpdateLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.UpdateLogsRequest}
 */
proto.attendancePackage.UpdateLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployeeId(value);
      break;
    case 2:
      var value = new proto.attendancePackage.UpdateLog;
      reader.readMessage(value,proto.attendancePackage.UpdateLog.deserializeBinaryFromReader);
      msg.addUpdateLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.UpdateLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.UpdateLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.UpdateLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmployeeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUpdateLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.attendancePackage.UpdateLog.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 employee_id = 1;
 * @return {number}
 */
proto.attendancePackage.UpdateLogsRequest.prototype.getEmployeeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.attendancePackage.UpdateLogsRequest.prototype.setEmployeeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UpdateLog update_logs = 2;
 * @return {!Array<!proto.attendancePackage.UpdateLog>}
 */
proto.attendancePackage.UpdateLogsRequest.prototype.getUpdateLogsList = function() {
  return /** @type{!Array<!proto.attendancePackage.UpdateLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.attendancePackage.UpdateLog, 2));
};


/** @param {!Array<!proto.attendancePackage.UpdateLog>} value */
proto.attendancePackage.UpdateLogsRequest.prototype.setUpdateLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.attendancePackage.UpdateLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.attendancePackage.UpdateLog}
 */
proto.attendancePackage.UpdateLogsRequest.prototype.addUpdateLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.attendancePackage.UpdateLog, opt_index);
};


proto.attendancePackage.UpdateLogsRequest.prototype.clearUpdateLogsList = function() {
  this.setUpdateLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.UpdateLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.attendancePackage.UpdateLog.repeatedFields_, null);
};
goog.inherits(proto.attendancePackage.UpdateLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.UpdateLog.displayName = 'proto.attendancePackage.UpdateLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.attendancePackage.UpdateLog.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.UpdateLog.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.UpdateLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.UpdateLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    shiftDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    punchList: jspb.Message.toObjectList(msg.getPunchList(),
    proto.attendancePackage.Punch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.UpdateLog}
 */
proto.attendancePackage.UpdateLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.UpdateLog;
  return proto.attendancePackage.UpdateLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.UpdateLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.UpdateLog}
 */
proto.attendancePackage.UpdateLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShiftDate(value);
      break;
    case 2:
      var value = new proto.attendancePackage.Punch;
      reader.readMessage(value,proto.attendancePackage.Punch.deserializeBinaryFromReader);
      msg.addPunch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.UpdateLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.UpdateLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.UpdateLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShiftDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPunchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.attendancePackage.Punch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string shift_date = 1;
 * @return {string}
 */
proto.attendancePackage.UpdateLog.prototype.getShiftDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.attendancePackage.UpdateLog.prototype.setShiftDate = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Punch punch = 2;
 * @return {!Array<!proto.attendancePackage.Punch>}
 */
proto.attendancePackage.UpdateLog.prototype.getPunchList = function() {
  return /** @type{!Array<!proto.attendancePackage.Punch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.attendancePackage.Punch, 2));
};


/** @param {!Array<!proto.attendancePackage.Punch>} value */
proto.attendancePackage.UpdateLog.prototype.setPunchList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.attendancePackage.Punch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.attendancePackage.Punch}
 */
proto.attendancePackage.UpdateLog.prototype.addPunch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.attendancePackage.Punch, opt_index);
};


proto.attendancePackage.UpdateLog.prototype.clearPunchList = function() {
  this.setPunchList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.attendancePackage.UpdateLogsStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.attendancePackage.UpdateLogsStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.attendancePackage.UpdateLogsStatus.displayName = 'proto.attendancePackage.UpdateLogsStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.attendancePackage.UpdateLogsStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.attendancePackage.UpdateLogsStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.attendancePackage.UpdateLogsStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLogsStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    okay: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.attendancePackage.UpdateLogsStatus}
 */
proto.attendancePackage.UpdateLogsStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.attendancePackage.UpdateLogsStatus;
  return proto.attendancePackage.UpdateLogsStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.attendancePackage.UpdateLogsStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.attendancePackage.UpdateLogsStatus}
 */
proto.attendancePackage.UpdateLogsStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOkay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.attendancePackage.UpdateLogsStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.attendancePackage.UpdateLogsStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.attendancePackage.UpdateLogsStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.attendancePackage.UpdateLogsStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOkay();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool okay = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.attendancePackage.UpdateLogsStatus.prototype.getOkay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.attendancePackage.UpdateLogsStatus.prototype.setOkay = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.attendancePackage);
